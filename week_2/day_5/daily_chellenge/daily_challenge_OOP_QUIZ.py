# --------------------------------------------
# üß† Exercise 1: OOP Questions and Answers
# --------------------------------------------

"""
1Ô∏è What is a class?
A class is a blueprint for creating objects. It defines attributes and methods.

2Ô∏è What is an instance?
An instance is a specific object created from a class.

3Ô∏è What is encapsulation?
Encapsulation restricts direct access to some of an object's components, protecting data integrity.

4Ô∏è What is abstraction?
Abstraction hides complex details and shows only essential features.

5Ô∏è What is inheritance?
Inheritance allows a class to derive attributes and methods from another class.

6Ô∏è What is multiple inheritance?
Multiple inheritance allows a class to inherit from more than one parent class.

7Ô∏è What is polymorphism?
Polymorphism allows objects of different classes to be treated the same way if they share method names.

8Ô∏è What is Method Resolution Order (MRO)?
MRO defines the order in which Python looks for a method in a hierarchy of classes.
"""

# --------------------------------------------
# üÉè Exercise 2: Deck of Cards
# --------------------------------------------

import random

class Card:
    def __init__(self, suit, value):
        self.suit = suit
        self.value = value

    def __repr__(self):
        return f"{self.value} of {self.suit}"


class Deck:
    def __init__(self):
        suits = ["Hearts", "Diamonds", "Clubs", "Spades"]
        values = ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"]
        self.cards = [Card(suit, value) for suit in suits for value in values]

    def shuffle(self):
        """Shuffle the deck of 52 cards"""
        if len(self.cards) < 52:
            print("Rebuilding the deck before shuffling...")
            self.__init__()  # reset deck if incomplete
        random.shuffle(self.cards)
        print("Deck shuffled!")

    def deal(self):
        """Deal a single card and remove it from the deck"""
        if len(self.cards) == 0:
            return "No cards left to deal!"
        return self.cards.pop()


# ‚úÖ Example usage
if __name__ == "__main__":
    deck = Deck()
    print(f"Total cards before shuffle: {len(deck.cards)}")
    deck.shuffle()
    print("Dealing one card:", deck.deal())
    print(f"Cards left in deck: {len(deck.cards)}")
